# Generated by Django 3.1.7 on 2022-02-14 08:34

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ExaminationSession',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_number', models.SmallIntegerField(verbose_name='session number')),
                ('internal_prefix', models.CharField(blank=True, max_length=50, null=True, verbose_name='internal prefix')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('examined_on', models.DateTimeField(blank=True, null=True, verbose_name='examined on')),
            ],
            options={
                'ordering': ['session_number'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='organization name')),
            ],
        ),
        migrations.CreateModel(
            name='DataAcoustic',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataActigraphy',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataCEI',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataHandwriting',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataPsychology',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataTCS',
            fields=[
                ('examination_session', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='subjects.examinationsession')),
                ('data', models.FileField(upload_to='data/', validators=[django.core.validators.FileExtensionValidator(['csv', 'xls', 'xlsx'])], verbose_name='data')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True, verbose_name='subject code')),
                ('year_of_birth', models.SmallIntegerField(blank=True, null=True, verbose_name='year of birth')),
                ('sex', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female')], max_length=1, null=True, verbose_name='sex')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created on')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='updated on')),
                ('last_examined_on', models.DateTimeField(blank=True, null=True, verbose_name='last examined on')),
                ('lbd_probability', models.FloatField(blank=True, null=True, verbose_name='lbd_probability')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.organization')),
            ],
            options={
                'ordering': ['code'],
            },
        ),
        migrations.AddField(
            model_name='examinationsession',
            name='subject',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='subjects.subject'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('predictor_username', models.CharField(blank=True, max_length=50, null=True, verbose_name='predictor username')),
                ('predictor_password', models.CharField(blank=True, max_length=50, null=True, verbose_name='predictor password')),
                ('predictor_registered', models.BooleanField(default=False, verbose_name='predictor registered')),
                ('predictor_access_token', models.CharField(blank=True, max_length=300, null=True, verbose_name='predictor access token')),
                ('predictor_refresh_token', models.CharField(blank=True, max_length=300, null=True, verbose_name='predictor refresh token')),
                ('power_user', models.BooleanField(default=False, verbose_name='power user status')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='subjects.organization')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
